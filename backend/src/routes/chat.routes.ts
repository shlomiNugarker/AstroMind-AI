import express from "express";
import { generateResponse } from "../services/openai.service";
import { authMiddleware } from "../middlewares/auth.middleware";
import { ChatMessage } from "../models/ChatMessage";
import { ObjectId } from "mongodb";

const router = express.Router();

router.post("/", authMiddleware, async (req, res) => {
  if (!process.env.OPENAI_API_KEY) {
    const defaultResponse = `
                  ◊†◊®◊ê◊î ◊©◊î◊û◊ï◊ó ◊©◊ú ◊î◊ë◊ô◊†◊î ◊î◊û◊ú◊ê◊õ◊ï◊™◊ô◊™ ◊ú◊ï◊ß◊ó ◊î◊§◊°◊ß◊î ◊ß◊¶◊®◊î... üß†üí§
                  ◊õ◊®◊í◊¢ ◊ê◊ô◊ü ◊ß◊®◊ì◊ô◊ò◊ô◊ù ◊ñ◊û◊ô◊†◊ô◊ù ◊ë-API, ◊ï◊ú◊õ◊ü ◊î◊¢◊ï◊ñ◊® ◊î◊ó◊õ◊ù ◊©◊ú◊†◊ï ◊ú◊ê ◊§◊¢◊ô◊ú. ◊ê◊ë◊ú ◊ê◊ú ◊ì◊ê◊í◊î ‚Äì ◊ñ◊î ◊ñ◊û◊†◊ô ◊ë◊ú◊ë◊ì!

                  üí° ◊û◊î ◊ê◊§◊©◊® ◊ú◊¢◊©◊ï◊™ ◊ë◊ô◊†◊™◊ô◊ô◊ù?
                  ‚úÖ ◊ú◊ó◊ß◊ï◊® ◊ê◊™ ◊©◊ê◊® ◊î◊û◊¢◊®◊õ◊™ ◊ï◊ú◊î◊™◊®◊©◊ù ◊û◊î◊ô◊õ◊ï◊ú◊ï◊™ ◊©◊ú◊†◊ï
                  ‚úÖ ◊ú◊ë◊ì◊ï◊ß ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊® ‚Äì ◊î◊ë◊ï◊ò ◊ô◊ó◊ñ◊ï◊® ◊ú◊§◊¢◊ï◊ú ◊ë◊ß◊®◊ï◊ë
                  ‚úÖ ◊ú◊î◊©◊ê◊ô◊® ◊ú◊†◊ï ◊î◊ï◊ì◊¢◊î ◊ï◊ê◊†◊ó◊†◊ï ◊†◊ó◊ñ◊ï◊® ◊ê◊ú◊ô◊ö ◊¢◊ù ◊™◊©◊ï◊ë◊î

                  ◊ê◊†◊ó◊†◊ï ◊¢◊ï◊ë◊ì◊ô◊ù ◊õ◊ì◊ô ◊ú◊î◊ë◊ò◊ô◊ó ◊ó◊ï◊ï◊ô◊ô◊™ ◊û◊©◊™◊û◊© ◊ó◊ú◊ß◊î ◊ï◊ê◊ô◊†◊ò◊®◊ê◊ß◊ò◊ô◊ë◊ô◊™, ◊ê◊ñ ◊™◊ï◊ì◊î ◊¢◊ú ◊î◊°◊ë◊ú◊†◊ï◊™! üôè
                            `;

    return res.json({ message: defaultResponse });
  }
  const { message } = req.body;
  // @ts-ignore
  const userId = req.user?._id;

  if (!message) {
    return res.status(400).json({ error: "Message is required" });
  }

  try {
    const userMessage = await ChatMessage.create({
      userId,
      role: "user",
      text: message,
    });

    const assistantResponse = await generateResponse(message);

    const botMessage = await ChatMessage.create({
      userId,
      role: "assistant",
      text: assistantResponse,
    });

    res.json({ message: assistantResponse });
  } catch (error) {
    console.error("‚ùå Error handling chat message:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

router.get("/history", authMiddleware, async (req, res) => {
  // @ts-ignore
  const userId = req.user?._id;

  try {
    const messages = await ChatMessage.find(
      { userId: new ObjectId(userId) },
      { _id: 0, updatedAt: 0, __v: 0, userId: 0 }
    ).sort({ createdAt: 1 });

    res.json({ messages });
  } catch (error) {
    console.error("‚ùå Error fetching chat history:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

export default router;
