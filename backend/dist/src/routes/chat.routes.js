"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const openai_service_1 = require("../services/openai.service");
const auth_middleware_1 = require("../middlewares/auth.middleware");
const ChatMessage_1 = require("../models/ChatMessage");
const mongodb_1 = require("mongodb");
const router = express_1.default.Router();
const responses = {
    he: [
        "üîÆ ◊°◊ë◊™◊ê ◊©◊ú◊ô ◊™◊û◊ô◊ì ◊ê◊û◊®◊î: '◊î◊í◊ï◊®◊ú ◊ë◊ô◊ì◊ô◊ô◊ù ◊©◊ú◊ö... ◊ê◊ë◊ú ◊™◊ó◊ñ◊ô◊ï◊™ ◊ò◊ï◊ë◊ï◊™ ◊¢◊ï◊ú◊ï◊™ ◊õ◊°◊£!' üòâ",
        "‚ú® ◊ê◊†◊©◊ô◊ù ◊ó◊õ◊û◊ô◊ù ◊ô◊ï◊ì◊¢◊ô◊ù ◊©◊î◊¢◊™◊ô◊ì ◊ú◊ê ◊õ◊™◊ï◊ë ◊ë◊ê◊ë◊ü ‚Äì ◊ê◊ë◊ú ◊î◊û◊ô◊ì◊¢ ◊î◊ê◊û◊ô◊™◊ô ◊†◊û◊¶◊ê ◊û◊ê◊ó◊ï◊®◊ô ◊û◊†◊ï◊ô!",
        "üåå ◊õ◊ï◊ú◊ù ◊®◊ï◊¶◊ô◊ù ◊ú◊ì◊¢◊™ ◊û◊î ◊î◊õ◊ï◊õ◊ë◊ô◊ù ◊ê◊ï◊û◊®◊ô◊ù, ◊ê◊ë◊ú ◊®◊ß ◊î◊ó◊õ◊û◊ô◊ù ◊ë◊ê◊û◊™ ◊û◊ï◊õ◊†◊ô◊ù ◊ú◊î◊©◊ß◊ô◊¢ ◊ë◊¢◊™◊ô◊ì ◊©◊ú◊î◊ù!",
        "üåô '◊ê◊ù ◊ê◊™◊î ◊®◊ï◊¶◊î ◊™◊©◊ï◊ë◊ï◊™ ◊í◊ì◊ï◊ú◊ï◊™, ◊™◊î◊ô◊î ◊û◊ï◊õ◊ü ◊ú◊©◊ú◊ù ◊ß◊¶◊™ ◊ß◊ò◊ü' ‚Äì ◊ê◊û◊® ◊õ◊ú ◊ê◊°◊ò◊®◊ï◊ú◊ï◊í ◊ó◊õ◊ù ◊ê◊ô ◊§◊¢◊ù.",
        "üî≠ ◊ê◊†◊©◊ô◊ù ◊û◊¶◊ú◊ô◊ó◊ô◊ù ◊ú◊ê ◊û◊ó◊õ◊ô◊ù ◊©◊î◊û◊ñ◊ú ◊ô◊í◊ô◊¢ ‚Äì ◊î◊ù ◊ì◊ï◊ê◊í◊ô◊ù ◊©◊î◊ï◊ê ◊ô◊í◊ô◊¢ ◊¢◊ù ◊û◊†◊ï◊ô ◊§◊®◊ô◊û◊ô◊ï◊ù!",
        "üå† ◊°◊ï◊ì ◊î◊î◊¶◊ú◊ó◊î? ◊ú◊ì◊¢◊™ ◊ú◊ê◊ü ◊î◊õ◊ï◊õ◊ë◊ô◊ù ◊û◊ï◊ë◊ô◊ú◊ô◊ù ◊ê◊ï◊™◊ö ‚Äì ◊ï◊î◊ù ◊ú◊ï◊ó◊©◊ô◊ù ◊®◊ß ◊ú◊û◊ô ◊©◊û◊ï◊õ◊ü ◊ú◊î◊ß◊©◊ô◊ë...",
        "üí´ ◊ó◊õ◊û◊ô◊ù ◊ê◊ï◊û◊®◊ô◊ù ◊©'◊ê◊ô◊ü ◊ó◊ô◊ñ◊ï◊ô ◊ò◊ï◊ë ◊ô◊ï◊™◊® ◊û◊î◊ó◊ú◊ò◊ï◊™ ◊©◊ú◊ö'... ◊ê◊ë◊ú ◊ë◊ï◊ê ◊†◊í◊ô◊ì ◊©◊ó◊ô◊ñ◊ï◊ô ◊û◊ì◊ï◊ô◊ß ◊ú◊ê ◊û◊ñ◊ô◊ß!",
        "üî• ◊õ◊û◊ï ◊©◊°◊ë◊™◊ê ◊™◊û◊ô◊ì ◊ê◊û◊®◊î: '◊†◊õ◊ï◊ü, ◊î◊ó◊ô◊ô◊ù ◊î◊ù ◊î◊ô◊û◊ï◊® ‚Äì ◊ê◊ë◊ú ◊ú◊û◊î ◊ú◊ê ◊ú◊ß◊ë◊ú ◊î◊¶◊¶◊î ◊ú◊ß◊ú◊§◊ô◊ù?'",
        "ü™ê ◊ë◊¢◊ï◊ú◊ù ◊©◊ë◊ï ◊õ◊ï◊ú◊ù ◊û◊ó◊§◊©◊ô◊ù ◊õ◊ô◊ï◊ï◊ü, ◊û◊ô ◊©◊ô◊© ◊ú◊ï ◊û◊§◊î ◊ò◊ï◊ë◊î ◊î◊ï◊ê ◊ñ◊î ◊©◊û◊í◊ô◊¢ ◊î◊õ◊ô ◊®◊ó◊ï◊ß!",
        "üîê '◊ê◊ù ◊î◊ô◊ô◊™ ◊ô◊ï◊ì◊¢ ◊ê◊™ ◊î◊û◊°◊§◊®◊ô◊ù ◊©◊ú ◊î◊ú◊ï◊ò◊ï, ◊î◊ô◊ô◊™ ◊û◊©◊ó◊ß?'... ◊î◊™◊©◊ï◊ë◊ï◊™ ◊©◊ú◊ô ◊ñ◊î ◊ë◊ì◊ô◊ï◊ß ◊ê◊ï◊™◊ï ◊ì◊ë◊®!",
        "üåô '◊î◊õ◊ï◊õ◊ë◊ô◊ù ◊û◊õ◊ï◊ï◊†◊ô◊ù ◊ê◊ï◊™◊ö, ◊ê◊ë◊ú ◊ê◊™◊î ◊ñ◊î ◊©◊û◊ó◊ñ◊ô◊ß ◊ë◊î◊í◊î' ‚Äì ◊û◊†◊ï◊ô ◊ô◊®◊ê◊î ◊ú◊ö ◊ê◊™ ◊î◊ì◊®◊ö!",
        "üìú ◊ë◊¢◊ï◊ú◊ù ◊©◊ú ◊ë◊ú◊ë◊ï◊ú, ◊ô◊© ◊õ◊ê◊ú◊î ◊©◊û◊ß◊©◊ô◊ë◊ô◊ù ◊ú◊®◊ó◊ï◊ë ‚Äì ◊ï◊ê◊ó◊®◊ô◊ù ◊©◊û◊ß◊©◊ô◊ë◊ô◊ù ◊ú◊ê◊°◊ò◊®◊ï◊ú◊ï◊í◊ô◊î. ◊ê◊™◊î ◊ë◊ê◊ô◊ñ◊î ◊¶◊ì?",
        "üå† '◊û◊ñ◊ú ◊ò◊ï◊ë ◊î◊ï◊ê ◊ú◊ê ◊ß◊°◊ù, ◊î◊ï◊ê ◊™◊ï◊¶◊ê◊î ◊©◊ú ◊î◊õ◊†◊î ◊†◊õ◊ï◊†◊î' ‚Äì ◊ï◊î◊õ◊†◊î ◊ò◊ï◊ë◊î ◊û◊™◊ó◊ô◊ú◊î ◊ë◊ó◊ô◊ñ◊ï◊ô ◊û◊ì◊ï◊ô◊ß!",
        "‚ú® ◊î◊¢◊ï◊ú◊ù ◊©◊ô◊ô◊ö ◊ú◊ê◊û◊ô◊¶◊ô◊ù ‚Äì ◊ï◊û◊ô ◊©◊û◊ï◊õ◊ü ◊ú◊î◊©◊ß◊ô◊¢ ◊ë◊¢◊¶◊û◊ï ◊î◊ï◊ê ◊™◊û◊ô◊ì ◊¶◊¢◊ì ◊ê◊ó◊ì ◊ß◊ì◊ô◊û◊î!",
        "üîÆ '◊ú◊©◊ê◊ï◊ú ◊ñ◊î ◊ó◊ô◊†◊ù, ◊ú◊ì◊¢◊™ ◊ñ◊î ◊§◊®◊ô◊û◊ô◊ï◊ù' ‚Äì ◊õ◊û◊ï ◊©◊î◊ê◊°◊ò◊®◊ï◊ú◊ï◊í◊ô◊ù ◊î◊ß◊ì◊ï◊û◊ô◊ù ◊™◊û◊ô◊ì ◊ê◊û◊®◊ï!",
        "üåü '◊ê◊£ ◊§◊¢◊ù ◊ê◊ú ◊™◊ñ◊ú◊ñ◊ú ◊ë◊õ◊ï◊ó ◊î◊ô◊ì◊ô◊¢◊î' ‚Äì ◊ï◊û◊ô ◊©◊ô◊ï◊ì◊¢ ◊ô◊ï◊™◊®, ◊û◊¶◊ú◊ô◊ó ◊ô◊ï◊™◊®!",
        "üíé '◊ê◊ú ◊™◊ë◊ñ◊ë◊ñ ◊ñ◊û◊ü ◊¢◊ú ◊†◊ô◊ó◊ï◊©◊ô◊ù ◊õ◊©◊ê◊§◊©◊® ◊ú◊ß◊ë◊ú ◊™◊©◊ï◊ë◊î ◊û◊ì◊ï◊ô◊ß◊™' ‚Äì ◊î◊®◊ô ◊ñ◊ï ◊ó◊õ◊û◊™ ◊î◊ì◊ï◊®◊ï◊™!",
        "üî• ◊î◊õ◊ï◊õ◊ë◊ô◊ù ◊õ◊ë◊® ◊ô◊ï◊ì◊¢◊ô◊ù ◊ê◊™ ◊î◊™◊©◊ï◊ë◊ï◊™, ◊®◊ß ◊¶◊®◊ô◊ö ◊ê◊™ ◊î◊õ◊ú◊ô◊ù ◊õ◊ì◊ô ◊ú◊ß◊®◊ï◊ê ◊ê◊ï◊™◊ü ◊†◊õ◊ï◊ü!",
        "‚ö° '◊õ◊©◊î◊ô◊ß◊ï◊ù ◊û◊ì◊ë◊® ‚Äì ◊î◊ó◊õ◊û◊ô◊ù ◊û◊ß◊©◊ô◊ë◊ô◊ù, ◊ï◊î◊©◊ê◊® ◊û◊û◊©◊ô◊õ◊ô◊ù ◊ú◊†◊ó◊©'. ◊ê◊ô◊ñ◊î ◊û◊î◊ù ◊ê◊™◊î ◊®◊ï◊¶◊î ◊ú◊î◊ô◊ï◊™?",
        "üõ∏ ◊õ◊ú ◊î◊û◊ï◊¶◊ú◊ó◊ô◊ù ◊©◊ê◊†◊ô ◊û◊õ◊ô◊® ◊ó◊ô◊§◊©◊ï ◊™◊©◊ï◊ë◊ï◊™. ◊î◊î◊ë◊ì◊ú? ◊î◊ù ◊ë◊ó◊®◊ï ◊ú◊©◊û◊ï◊¢ ◊ê◊ï◊™◊ü ◊ë◊§◊®◊ô◊û◊ô◊ï◊ù!",
    ],
    en: [
        "üîÆ My grandma always said: 'Destiny is in your hands... but the best predictions come at a price!' üòâ",
        "‚ú® Wise people know the future isn‚Äôt set in stone ‚Äì but the real insights are behind a premium subscription!",
        "üåå Everyone wants to know what the stars say, but only the truly wise invest in their future!",
        "üåô 'If you want great answers, be ready to pay a little price' ‚Äì every wise astrologer ever.",
        "üî≠ Successful people don‚Äôt wait for luck ‚Äì they make sure it comes with a premium subscription!",
        "üå† The secret to success? Knowing where the stars are leading you ‚Äì and they whisper only to those who listen...",
        "üí´ Smart people say, 'No prediction beats your own decisions'... but let‚Äôs just say, accurate predictions don‚Äôt hurt!",
        "üî• As grandma always said: 'Sure, life is a gamble ‚Äì but why not get a sneak peek at the cards?'",
        "ü™ê In a world where everyone seeks direction, those with the best map get the farthest!",
        "üîê 'If you knew the winning lottery numbers, would you play?'... My answers work the same way!",
        "üåô 'The stars guide you, but you hold the steering wheel' ‚Äì a premium subscription shows you the road!",
        "üìú In a world full of confusion, some listen to the streets ‚Äì others listen to astrology. Which one are you?",
        "üå† 'Good fortune isn‚Äôt magic; it‚Äôs the result of good preparation' ‚Äì and good preparation starts with accurate insights!",
        "‚ú® The world belongs to the bold ‚Äì and those who invest in themselves are always one step ahead!",
        "üîÆ 'Asking is free, knowing is premium' ‚Äì just like the ancient astrologers always said!",
        "üåü 'Never underestimate the power of knowledge' ‚Äì because those who know more, win more!",
        "üíé 'Don‚Äôt waste time guessing when you can get precise answers' ‚Äì that‚Äôs just common wisdom!",
        "üî• The stars already know the answers, you just need the right tools to read them!",
        "‚ö° 'When the universe speaks ‚Äì the wise listen, and the rest keep guessing.' Which one do you want to be?",
        "üõ∏ Every successful person I know looked for answers. The difference? They chose to get them in premium!",
    ],
};
if (!process.env.OPENAI_API_KEY) {
    console.warn("‚ö†Ô∏è OPENAI_API_KEY is missing. The chatbot will not function.");
}
router.post("/", auth_middleware_1.authMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { message, lang } = req.body;
    if (!process.env.OPENAI_API_KEY) {
        return res.json({
            message: responses[lang][Math.floor(Math.random() * responses[lang].length)],
        });
    }
    // @ts-ignore
    const userId = (_a = req.user) === null || _a === void 0 ? void 0 : _a._id;
    if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
    }
    if (!message) {
        return res.status(400).json({ error: "Message is required" });
    }
    try {
        yield ChatMessage_1.ChatMessage.create({ userId, role: "user", text: message });
        const assistantResponse = yield (0, openai_service_1.generateResponse)(message);
        yield ChatMessage_1.ChatMessage.create({
            userId,
            role: "system",
            text: assistantResponse,
        });
        res.json({ message: assistantResponse });
    }
    catch (error) {
        console.error("‚ùå Error handling chat message:", error);
        res.status(500).json({
            error: error instanceof Error ? error.message : "Internal Server Error",
        });
    }
}));
router.get("/history", auth_middleware_1.authMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    // @ts-ignore
    const userId = (_b = req.user) === null || _b === void 0 ? void 0 : _b._id;
    if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
    }
    try {
        const messages = yield ChatMessage_1.ChatMessage.find({ userId: new mongodb_1.ObjectId(userId) }, { _id: 0, updatedAt: 0, __v: 0, userId: 0 }).sort({ createdAt: 1 });
        res.json({ messages });
    }
    catch (error) {
        console.error("‚ùå Error fetching chat history:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
}));
exports.default = router;
